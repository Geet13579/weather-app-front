{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Expert\\\\Desktop\\\\weather-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [location, setLocation] = useState(null);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(async position => {\n            const latitude = position.coords.latitude;\n            const longitude = position.coords.longitude;\n            setLocation({\n              latitude,\n              longitude\n            });\n            try {\n              const response = await fetch('/api/weather', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  latitude,\n                  longitude\n                })\n              });\n              if (!response.ok) {\n                throw new Error('Failed to fetch weather data');\n              }\n              const data = await response.json();\n              setWeatherData(data);\n            } catch (error) {\n              console.error('Error fetching weather data:', error);\n            }\n            const data = await response.json();\n            setWeatherData(data);\n          });\n        } else {\n          console.error('Geolocation is not supported by this browser.');\n        }\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n      }\n    };\n    fetchWeatherData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [location && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Latitude: \", location.latitude, \", Longitude: \", location.longitude]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), weatherData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weatherData.location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", weatherData.temperature]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Conditions: \", weatherData.conditions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading weather data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherApp, \"vtMd6QCHQ5+545//mZw07VCMACo=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherApp","_s","weatherData","setWeatherData","location","setLocation","fetchWeatherData","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","temperature","conditions","_c","$RefreshReg$"],"sources":["C:/Users/Expert/Desktop/weather-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst WeatherApp = () => {\n    const [weatherData, setWeatherData] = useState(null);\n    const [location, setLocation] = useState(null);\n\n    useEffect(() => {\n        const fetchWeatherData = async () => {\n            try {\n                if (navigator.geolocation) {\n                    navigator.geolocation.getCurrentPosition(async (position) => {\n                        const latitude = position.coords.latitude;\n                        const longitude = position.coords.longitude;\n                        setLocation({ latitude, longitude });\n\n                        try {\n                          const response = await fetch('/api/weather', {\n                              method: 'POST',\n                              headers: {\n                                  'Content-Type': 'application/json'\n                              },\n                              body: JSON.stringify({\n                                  latitude,\n                                  longitude\n                              })\n                          });\n                          if (!response.ok) {\n                              throw new Error('Failed to fetch weather data');\n                          }\n                          const data = await response.json();\n                          setWeatherData(data);\n                      } catch (error) {\n                          console.error('Error fetching weather data:', error);\n                      }\n                      \n                        const data = await response.json();\n                        setWeatherData(data);\n                    });\n                } else {\n                    console.error('Geolocation is not supported by this browser.');\n                }\n            } catch (error) {\n                console.error('Error fetching weather data:', error);\n            }\n        };\n\n        fetchWeatherData();\n    }, []);\n\n    return (\n        <div>\n            {location && (\n                <p>Latitude: {location.latitude}, Longitude: {location.longitude}</p>\n            )}\n            {weatherData ? (\n                <div>\n                    <h2>{weatherData.location}</h2>\n                    <p>Temperature: {weatherData.temperature}</p>\n                    <p>Conditions: {weatherData.conditions}</p>\n                    {/* Add more weather data as needed */}\n                </div>\n            ) : (\n                <p>Loading weather data...</p>\n            )}\n        </div>\n    );\n};\n\nexport default WeatherApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}