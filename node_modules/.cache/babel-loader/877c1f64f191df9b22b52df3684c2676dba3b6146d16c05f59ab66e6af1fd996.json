{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Expert\\\\Desktop\\\\weather-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [location, setLocation] = useState(null);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(async position => {\n            const latitude = position.coords.latitude;\n            const longitude = position.coords.longitude;\n            setLocation({\n              latitude,\n              longitude\n            });\n            const response = await fetch('http://localhost:5000/api/weather', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                latitude,\n                longitude\n              })\n            });\n            const data = await response.json();\n            setWeatherData(data);\n          });\n        } else {\n          console.error('Geolocation is not supported by this browser.');\n        }\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n      }\n    };\n    fetchWeatherData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [location && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Latitude: \", location.latitude, \", Longitude: \", location.longitude]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this), weatherData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weatherData.location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", weatherData.temperature]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Conditions: \", weatherData.conditions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading weather data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherApp, \"vtMd6QCHQ5+545//mZw07VCMACo=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherApp","_s","weatherData","setWeatherData","location","setLocation","fetchWeatherData","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","response","fetch","method","headers","body","JSON","stringify","data","json","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","temperature","conditions","_c","$RefreshReg$"],"sources":["C:/Users/Expert/Desktop/weather-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst WeatherApp = () => {\n    const [weatherData, setWeatherData] = useState(null);\n    const [location, setLocation] = useState(null);\n\n    useEffect(() => {\n        const fetchWeatherData = async () => {\n            try {\n                if (navigator.geolocation) {\n                    navigator.geolocation.getCurrentPosition(async (position) => {\n                        const latitude = position.coords.latitude;\n                        const longitude = position.coords.longitude;\n                        setLocation({ latitude, longitude });\n\n                        const response = await fetch('http://localhost:5000/api/weather', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify({\n                                latitude,\n                                longitude\n                            })\n                        });\n                        const data = await response.json();\n                        setWeatherData(data);\n                    });\n                } else {\n                    console.error('Geolocation is not supported by this browser.');\n                }\n            } catch (error) {\n                console.error('Error fetching weather data:', error);\n            }\n        };\n\n        fetchWeatherData();\n    }, []);\n\n    return (\n        <div>\n            {location && (\n                <p>Latitude: {location.latitude}, Longitude: {location.longitude}</p>\n            )}\n            {weatherData ? (\n                <div>\n                    <h2>{weatherData.location}</h2>\n                    <p>Temperature: {weatherData.temperature}</p>\n                    <p>Conditions: {weatherData.conditions}</p>\n                    {/* Add more weather data as needed */}\n                </div>\n            ) : (\n                <p>Loading weather data...</p>\n            )}\n        </div>\n    );\n};\n\nexport default WeatherApp;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACZ,MAAMS,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACA,IAAIC,SAAS,CAACC,WAAW,EAAE;UACvBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,MAAOC,QAAQ,IAAK;YACzD,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAM,CAACD,QAAQ;YACzC,MAAME,SAAS,GAAGH,QAAQ,CAACE,MAAM,CAACC,SAAS;YAC3CR,WAAW,CAAC;cAAEM,QAAQ;cAAEE;YAAU,CAAC,CAAC;YAEpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;cAC9DC,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;gBACjBT,QAAQ;gBACRE;cACJ,CAAC;YACL,CAAC,CAAC;YACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;YAClCnB,cAAc,CAACkB,IAAI,CAAC;UACxB,CAAC,CAAC;QACN,CAAC,MAAM;UACHE,OAAO,CAACC,KAAK,CAAC,+CAA+C,CAAC;QAClE;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACxD;IACJ,CAAC;IAEDlB,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIP,OAAA;IAAA0B,QAAA,GACKrB,QAAQ,iBACLL,OAAA;MAAA0B,QAAA,GAAG,YAAU,EAACrB,QAAQ,CAACO,QAAQ,EAAC,eAAa,EAACP,QAAQ,CAACS,SAAS;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CACvE,EACA3B,WAAW,gBACRH,OAAA;MAAA0B,QAAA,gBACI1B,OAAA;QAAA0B,QAAA,EAAKvB,WAAW,CAACE;MAAQ;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC/B9B,OAAA;QAAA0B,QAAA,GAAG,eAAa,EAACvB,WAAW,CAAC4B,WAAW;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7C9B,OAAA;QAAA0B,QAAA,GAAG,cAAY,EAACvB,WAAW,CAAC6B,UAAU;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE1C,CAAC,gBAEN9B,OAAA;MAAA0B,QAAA,EAAG;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAChC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC5B,EAAA,CAtDID,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AAwDhB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}