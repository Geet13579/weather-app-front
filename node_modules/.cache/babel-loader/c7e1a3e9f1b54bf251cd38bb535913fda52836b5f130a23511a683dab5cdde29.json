{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Expert\\\\Desktop\\\\weather-app\\\\src\\\\currentLocation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CurrentLocation() {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [location, setLocation] = useState(null);\n  const [icon, setIcon] = useState(\"CLEAR_DAY\");\n  useEffect(() => {\n    let isMounted = true;\n    const fetchWeatherData = async () => {\n      try {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(async position => {\n            const latitude = position.coords.latitude;\n            const longitude = position.coords.longitude;\n            if (isMounted) {\n              setLocation({\n                latitude,\n                longitude\n              });\n            }\n            try {\n              const response = await fetch('http://localhost:5000/api/weather', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  latitude,\n                  longitude\n                })\n              });\n              if (!response.ok) {\n                throw new Error('Failed to fetch weather data');\n              }\n              const data = await response.json();\n              if (isMounted) {\n                setWeatherData(data);\n                switch (data.main) {\n                  case \"Haze\":\n                    setIcon(\"CLEAR_DAY\");\n                    break;\n                  case \"Clouds\":\n                    setIcon(\"CLOUDY\");\n                    break;\n                  case \"Rain\":\n                    setIcon(\"RAIN\");\n                    break;\n                  case \"Snow\":\n                    setIcon(\"SNOW\");\n                    break;\n                  case \"Dust\":\n                    setIcon(\"WIND\");\n                    break;\n                  case \"Drizzle\":\n                    setIcon(\"SLEET\");\n                    break;\n                  case \"Fog\":\n                    setIcon(\"FOG\");\n                    break;\n                  case \"Smoke\":\n                    setIcon(\"FOG\");\n                    break;\n                  case \"Tornado\":\n                    setIcon(\"WIND\");\n                    break;\n                  default:\n                    setIcon(\"CLEAR_DAY\");\n                }\n              }\n            } catch (error) {\n              console.error('Error fetching weather data:', error);\n            }\n          });\n        } else {\n          console.error('Geolocation is not supported by this browser.');\n        }\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n      }\n    };\n    fetchWeatherData();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [console.log('weatherData', weatherData), console.log('location', location), weatherData && location && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: weatherData.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: weatherData.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date-time\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dmy\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"txt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"current-time\",\n              children: /*#__PURE__*/_jsxDEV(Clock, {\n                format: \"HH:mm:ss\",\n                interval: 1000,\n                ticking: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"temperature\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [Math.round(weatherData.temperature - 273), \"\\xB0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 60\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Forcast, {\n        icon: \"CLEAR_DAY\",\n        weather: weatherData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(CurrentLocation, \"gDtYaTQpyIhBPw5Hld7fnB+IpRo=\");\n_c = CurrentLocation;\nexport default CurrentLocation;\nvar _c;\n$RefreshReg$(_c, \"CurrentLocation\");","map":{"version":3,"names":["React","useState","useEffect","apiKeys","Clock","Forcast","loader","ReactAnimatedWeather","jsxDEV","_jsxDEV","CurrentLocation","_s","weatherData","setWeatherData","location","setLocation","icon","setIcon","isMounted","fetchWeatherData","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","main","error","console","Fragment","children","log","className","fileName","_jsxFileName","lineNumber","columnNumber","country","id","format","interval","ticking","Math","round","temperature","weather","_c","$RefreshReg$"],"sources":["C:/Users/Expert/Desktop/weather-app/src/currentLocation.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport apiKeys from \"./apiKeys\";\r\nimport Clock from \"react-live-clock\";\r\nimport Forcast from \"./forcast\";\r\nimport loader from \"./images/WeatherIcons.gif\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\nfunction CurrentLocation() {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [location, setLocation] = useState(null);\r\n  const [icon, setIcon] = useState(\"CLEAR_DAY\");\r\n\r\n\r\n \r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const fetchWeatherData = async () => {\r\n      try {\r\n        if (navigator.geolocation) {\r\n          navigator.geolocation.getCurrentPosition(async (position) => {\r\n            const latitude = position.coords.latitude;\r\n            const longitude = position.coords.longitude;\r\n            if (isMounted) {\r\n              setLocation({ latitude, longitude });\r\n            }\r\n\r\n            try {\r\n              const response = await fetch('http://localhost:5000/api/weather', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  latitude,\r\n                  longitude\r\n                })\r\n              });\r\n              if (!response.ok) {\r\n                throw new Error('Failed to fetch weather data');\r\n              }\r\n              const data = await response.json();\r\n              if (isMounted) {\r\n                setWeatherData(data);\r\n                switch (data.main) {\r\n                  case \"Haze\":\r\n                    setIcon(\"CLEAR_DAY\" );\r\n                    break;\r\n                  case \"Clouds\":\r\n                    setIcon(\"CLOUDY\" );\r\n                    break;\r\n                  case \"Rain\":\r\n                    setIcon(\"RAIN\" );\r\n                    break;\r\n                  case \"Snow\":\r\n                    setIcon(\"SNOW\" );\r\n                    break;\r\n                  case \"Dust\":\r\n                    setIcon(\"WIND\" );\r\n                    break;\r\n                  case \"Drizzle\":\r\n                    setIcon(\"SLEET\" );\r\n                    break;\r\n                  case \"Fog\":\r\n                    setIcon(\"FOG\" );\r\n                    break;\r\n                  case \"Smoke\":\r\n                    setIcon(\"FOG\");\r\n                    break;\r\n                  case \"Tornado\":\r\n                    setIcon(\"WIND\");\r\n                    break;\r\n                  default:\r\n                    setIcon(\"CLEAR_DAY\");\r\n                }\r\n              }\r\n            } catch (error) {\r\n              console.error('Error fetching weather data:', error);\r\n            }\r\n          });\r\n        } else {\r\n          console.error('Geolocation is not supported by this browser.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching weather data:', error);\r\n      }\r\n    };\r\n\r\n    fetchWeatherData();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n \r\n\r\n  return (\r\n    <React.Fragment>\r\n      {console.log('weatherData', weatherData)}\r\n      {console.log('location', location)}\r\n\r\n      {weatherData && location && (\r\n        <div>\r\n        <div className=\"city\">\r\n          <div className=\"title\">\r\n            <h2>{weatherData.location}</h2>\r\n            <h3>{weatherData.country}</h3>\r\n          </div>\r\n       \r\n            <div className=\"date-time\">\r\n              <div className=\"dmy\">\r\n                <div id=\"txt\"></div>\r\n                <div className=\"current-time\">\r\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\r\n                </div>\r\n              </div>\r\n              <div className=\"temperature\">\r\n                <p>\r\n                {Math.round(weatherData.temperature -273)}°<span>C</span>\r\n\r\n                </p>\r\n             \r\n              </div>\r\n            </div>\r\n            </div>\r\n            <Forcast icon=\"CLEAR_DAY\" weather={weatherData}  />\r\n          </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default CurrentLocation;\r\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,2BAA2B;AAC9C,OAAOC,oBAAoB,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1D,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,WAAW,CAAC;EAK7CC,SAAS,CAAC,MAAM;IACd,IAAIgB,SAAS,GAAG,IAAI;IAEpB,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,IAAIC,SAAS,CAACC,WAAW,EAAE;UACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,MAAOC,QAAQ,IAAK;YAC3D,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAM,CAACD,QAAQ;YACzC,MAAME,SAAS,GAAGH,QAAQ,CAACE,MAAM,CAACC,SAAS;YAC3C,IAAIR,SAAS,EAAE;cACbH,WAAW,CAAC;gBAAES,QAAQ;gBAAEE;cAAU,CAAC,CAAC;YACtC;YAEA,IAAI;cACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;gBAChEC,MAAM,EAAE,MAAM;gBACdC,OAAO,EAAE;kBACP,cAAc,EAAE;gBAClB,CAAC;gBACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;kBACnBT,QAAQ;kBACRE;gBACF,CAAC;cACH,CAAC,CAAC;cACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;gBAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;cACjD;cACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;cAClC,IAAInB,SAAS,EAAE;gBACbL,cAAc,CAACuB,IAAI,CAAC;gBACpB,QAAQA,IAAI,CAACE,IAAI;kBACf,KAAK,MAAM;oBACTrB,OAAO,CAAC,WAAY,CAAC;oBACrB;kBACF,KAAK,QAAQ;oBACXA,OAAO,CAAC,QAAS,CAAC;oBAClB;kBACF,KAAK,MAAM;oBACTA,OAAO,CAAC,MAAO,CAAC;oBAChB;kBACF,KAAK,MAAM;oBACTA,OAAO,CAAC,MAAO,CAAC;oBAChB;kBACF,KAAK,MAAM;oBACTA,OAAO,CAAC,MAAO,CAAC;oBAChB;kBACF,KAAK,SAAS;oBACZA,OAAO,CAAC,OAAQ,CAAC;oBACjB;kBACF,KAAK,KAAK;oBACRA,OAAO,CAAC,KAAM,CAAC;oBACf;kBACF,KAAK,OAAO;oBACVA,OAAO,CAAC,KAAK,CAAC;oBACd;kBACF,KAAK,SAAS;oBACZA,OAAO,CAAC,MAAM,CAAC;oBACf;kBACF;oBACEA,OAAO,CAAC,WAAW,CAAC;gBACxB;cACF;YACF,CAAC,CAAC,OAAOsB,KAAK,EAAE;cACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;YACtD;UACF,CAAC,CAAC;QACJ,CAAC,MAAM;UACLC,OAAO,CAACD,KAAK,CAAC,+CAA+C,CAAC;QAChE;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDpB,gBAAgB,CAAC,CAAC;IAElB,OAAO,MAAM;MACXD,SAAS,GAAG,KAAK;IACnB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAMN,oBACET,OAAA,CAACT,KAAK,CAACyC,QAAQ;IAAAC,QAAA,GACZF,OAAO,CAACG,GAAG,CAAC,aAAa,EAAE/B,WAAW,CAAC,EACvC4B,OAAO,CAACG,GAAG,CAAC,UAAU,EAAE7B,QAAQ,CAAC,EAEjCF,WAAW,IAAIE,QAAQ,iBACtBL,OAAA;MAAAiC,QAAA,gBACAjC,OAAA;QAAKmC,SAAS,EAAC,MAAM;QAAAF,QAAA,gBACnBjC,OAAA;UAAKmC,SAAS,EAAC,OAAO;UAAAF,QAAA,gBACpBjC,OAAA;YAAAiC,QAAA,EAAK9B,WAAW,CAACE;UAAQ;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC/BvC,OAAA;YAAAiC,QAAA,EAAK9B,WAAW,CAACqC;UAAO;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC,eAEJvC,OAAA;UAAKmC,SAAS,EAAC,WAAW;UAAAF,QAAA,gBACxBjC,OAAA;YAAKmC,SAAS,EAAC,KAAK;YAAAF,QAAA,gBAClBjC,OAAA;cAAKyC,EAAE,EAAC;YAAK;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACpBvC,OAAA;cAAKmC,SAAS,EAAC,cAAc;cAAAF,QAAA,eAC3BjC,OAAA,CAACL,KAAK;gBAAC+C,MAAM,EAAC,UAAU;gBAACC,QAAQ,EAAE,IAAK;gBAACC,OAAO,EAAE;cAAK;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACNvC,OAAA;YAAKmC,SAAS,EAAC,aAAa;YAAAF,QAAA,eAC1BjC,OAAA;cAAAiC,QAAA,GACCY,IAAI,CAACC,KAAK,CAAC3C,WAAW,CAAC4C,WAAW,GAAE,GAAG,CAAC,EAAC,MAAC,eAAA/C,OAAA;gBAAAiC,QAAA,EAAM;cAAC;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEtD;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAED,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACNvC,OAAA,CAACJ,OAAO;QAACW,IAAI,EAAC,WAAW;QAACyC,OAAO,EAAE7C;MAAY;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAErB;AAACrC,EAAA,CA/HQD,eAAe;AAAAgD,EAAA,GAAfhD,eAAe;AAiIxB,eAAeA,eAAe;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}