{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Expert\\\\Desktop\\\\weather-app\\\\src\\\\currentLocation.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import apiKeys from \"./apiKeys\";\n// import Clock from \"react-live-clock\";\n// import Forcast from \"./forcast\";\n// import loader from \"./images/WeatherIcons.gif\";\n// import ReactAnimatedWeather from \"react-animated-weather\";\n// const dateBuilder = (d) => {\n//   let months = [\n//     \"January\",\n//     \"February\",\n//     \"March\",\n//     \"April\",\n//     \"May\",\n//     \"June\",\n//     \"July\",\n//     \"August\",\n//     \"September\",\n//     \"October\",\n//     \"November\",\n//     \"December\",\n//   ];\n//   let days = [\n//     \"Sunday\",\n//     \"Monday\",\n//     \"Tuesday\",\n//     \"Wednesday\",\n//     \"Thursday\",\n//     \"Friday\",\n//     \"Saturday\",\n//   ];\n\n//   let day = days[d.getDay()];\n//   let date = d.getDate();\n//   let month = months[d.getMonth()];\n//   let year = d.getFullYear();\n\n//   return `${day}, ${date} ${month} ${year}`;\n// };\n// const defaults = {\n//   color: \"white\",\n//   size: 112,\n//   animate: true,\n// };\n// class Weather extends React.Component {\n//   state = {\n//     lat: undefined,\n//     lon: undefined,\n//     errorMessage: undefined,\n//     temperatureC: undefined,\n//     temperatureF: undefined,\n//     city: undefined,\n//     country: undefined,\n//     humidity: undefined,\n//     description: undefined,\n//     icon: \"CLEAR_DAY\",\n//     sunrise: undefined,\n//     sunset: undefined,\n//     errorMsg: undefined,\n//   };\n\n//   componentDidMount() {\n//     if (navigator.geolocation) {\n//       this.getPosition()\n//         //If user allow location service then will fetch data & send it to get-weather function.\n//         .then((position) => {\n//           this.getWeather(position.coords.latitude, position.coords.longitude);\n//         })\n//         .catch((err) => {\n//           //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n//           this.getWeather(28.67, 77.22);\n//           alert(\n//             \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n//           );\n//         });\n//     } else {\n//       alert(\"Geolocation not available\");\n//     }\n\n//     this.timerID = setInterval(\n//       () => this.getWeather(this.state.lat, this.state.lon),\n//       600000\n//     );\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.timerID);\n//   }\n\n//   // tick = () => {\n//   //   this.getPosition()\n//   //   .then((position) => {\n//   //     this.getWeather(position.coords.latitude, position.coords.longitude)\n//   //   })\n//   //   .catch((err) => {\n//   //     this.setState({ errorMessage: err.message });\n//   //   });\n//   // }\n\n//   getPosition = (options) => {\n//     return new Promise(function (resolve, reject) {\n//       navigator.geolocation.getCurrentPosition(resolve, reject, options);\n//     });\n//   };\n//   getWeather = async (lat, lon) => {\n//     const api_call = await fetch(\n//       `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=5f4744fd6ed7e30e662f45ae7fd7b8bf`\n//     );\n\n//     const data = await api_call.json();\n//     this.setState({\n//       lat: lat,\n//       lon: lon,\n//       city: data.name,\n//       temperatureC: Math.round(data.main.temp),\n//       temperatureF: Math.round(data.main.temp * 1.8 + 32),\n//       humidity: data.main.humidity,\n//       main: data.weather[0].main,\n//       country: data.sys.country,\n//       // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n\n//       // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n//     });\n//     switch (this.state.main) {\n//       case \"Haze\":\n//         this.setState({ icon: \"CLEAR_DAY\" });\n//         break;\n//       case \"Clouds\":\n//         this.setState({ icon: \"CLOUDY\" });\n//         break;\n//       case \"Rain\":\n//         this.setState({ icon: \"RAIN\" });\n//         break;\n//       case \"Snow\":\n//         this.setState({ icon: \"SNOW\" });\n//         break;\n//       case \"Dust\":\n//         this.setState({ icon: \"WIND\" });\n//         break;\n//       case \"Drizzle\":\n//         this.setState({ icon: \"SLEET\" });\n//         break;\n//       case \"Fog\":\n//         this.setState({ icon: \"FOG\" });\n//         break;\n//       case \"Smoke\":\n//         this.setState({ icon: \"FOG\" });\n//         break;\n//       case \"Tornado\":\n//         this.setState({ icon: \"WIND\" });\n//         break;\n//       default:\n//         this.setState({ icon: \"CLEAR_DAY\" });\n//     }\n//   };\n\n//   render() {\n//     if (this.state.temperatureC) {\n//       return (\n// <React.Fragment>\n//   <div className=\"city\">\n//     <div className=\"title\">\n//       <h2>{this.state.city}</h2>\n//       <h3>{this.state.country}</h3>\n//     </div>\n//   <div className=\"mb-icon\">\n//     {\" \"}\n// <ReactAnimatedWeather\n//   icon={this.state.icon}\n//   color={defaults.color}\n//   size={defaults.size}\n//   animate={defaults.animate}\n// />\n//     <p>{this.state.main}</p>\n//   </div>\n//   <div className=\"date-time\">\n//     <div className=\"dmy\">\n//       <div id=\"txt\"></div>\n//       <div className=\"current-time\">\n//         <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n//       </div>\n//       <div className=\"current-date\">{dateBuilder(new Date())}</div>\n//     </div>\n//     <div className=\"temperature\">\n//       <p>\n//         {this.state.temperatureC}Â°<span>C</span>\n//       </p>\n//       {/* <span className=\"slash\">/</span>\n//       {this.state.temperatureF} &deg;F */}\n//     </div>\n//   </div>\n// </div>\n// <Forcast icon={this.state.icon} weather={this.state.main} />\n// </React.Fragment>\n//       );\n//     } else {\n//       return (\n//         <React.Fragment>\n//           <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n//           <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n//             Detecting your location\n//           </h3>\n//           <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n//             Your current location wil be displayed on the App <br></br> & used\n//             for calculating Real time weather.\n//           </h3>\n//         </React.Fragment>\n//       );\n//     }\n//   }\n// }\n\n// export default Weather;\n\nimport React, { useState, useEffect } from 'react';\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CurrentLocation() {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [location, setLocation] = useState(null);\n  useEffect(() => {\n    let isMounted = true;\n    const fetchWeatherData = async () => {\n      try {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(async position => {\n            const latitude = position.coords.latitude;\n            const longitude = position.coords.longitude;\n            if (isMounted) {\n              setLocation({\n                latitude,\n                longitude\n              });\n            }\n            try {\n              const response = await fetch('http://localhost:5000/api/weather', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  latitude,\n                  longitude\n                })\n              });\n              if (!response.ok) {\n                throw new Error('Failed to fetch weather data');\n              }\n              const data = await response.json();\n              if (isMounted) {\n                setWeatherData(data);\n              }\n            } catch (error) {\n              console.error('Error fetching weather data:', error);\n            }\n          });\n        } else {\n          console.error('Geolocation is not supported by this browser.');\n        }\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n      }\n    };\n    fetchWeatherData();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [console.log('weatherData', weatherData), console.log('location', location), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: weatherData.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: weatherData.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-icon\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(ReactAnimatedWeather, {\n            icon: \"CLEAR_DAY\",\n            color: defaults.color,\n            size: defaults.size,\n            animate: defaults.animate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date-time\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dmy\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"txt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"current-time\",\n              children: /*#__PURE__*/_jsxDEV(Clock, {\n                format: \"HH:mm:ss\",\n                interval: 1000,\n                ticking: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"temperature\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [Math.round(weatherData.temperature - 273), \"\\xB0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 60\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-icon\",\n          children: /*#__PURE__*/_jsxDEV(ReactAnimatedWeather, {\n            icon: props.icon,\n            color: defaults.color,\n            size: defaults.size,\n            animate: defaults.animate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"today-weather\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: props.weather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"search-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"search-bar\",\n              placeholder: \"Search any city\",\n              onChange: e => setQuery(e.target.value),\n              value: query\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"img-box\",\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"https://images.avishkaar.cc/workflow/newhp/search-white.png\",\n                onClick: search\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: typeof weather.main != \"undefined\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"cityHead\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [weather.name, \", \", weather.sys.country]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"temp\",\n                  src: `https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Temperature\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"temp\",\n                  children: [Math.round(weatherData.temperature), \"\\xB0c (\", weatherData.icon, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Humidity\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"temp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Visibility\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"temp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Wind Speed\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"temp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 13\n            }, this) : /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n}\n_s(CurrentLocation, \"vtMd6QCHQ5+545//mZw07VCMACo=\");\n_c = CurrentLocation;\nexport default CurrentLocation;\nvar _c;\n$RefreshReg$(_c, \"CurrentLocation\");","map":{"version":3,"names":["React","useState","useEffect","apiKeys","Clock","Forcast","loader","ReactAnimatedWeather","jsxDEV","_jsxDEV","CurrentLocation","_s","weatherData","setWeatherData","location","setLocation","isMounted","fetchWeatherData","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","console","defaults","color","size","animate","Fragment","children","log","className","fileName","_jsxFileName","lineNumber","columnNumber","country","icon","id","format","interval","ticking","Math","round","temperature","props","weather","type","placeholder","onChange","e","setQuery","target","value","query","src","onClick","search","main","name","sys","_c","$RefreshReg$"],"sources":["C:/Users/Expert/Desktop/weather-app/src/currentLocation.js"],"sourcesContent":["// import React from \"react\";\r\n// import apiKeys from \"./apiKeys\";\r\n// import Clock from \"react-live-clock\";\r\n// import Forcast from \"./forcast\";\r\n// import loader from \"./images/WeatherIcons.gif\";\r\n// import ReactAnimatedWeather from \"react-animated-weather\";\r\n// const dateBuilder = (d) => {\r\n//   let months = [\r\n//     \"January\",\r\n//     \"February\",\r\n//     \"March\",\r\n//     \"April\",\r\n//     \"May\",\r\n//     \"June\",\r\n//     \"July\",\r\n//     \"August\",\r\n//     \"September\",\r\n//     \"October\",\r\n//     \"November\",\r\n//     \"December\",\r\n//   ];\r\n//   let days = [\r\n//     \"Sunday\",\r\n//     \"Monday\",\r\n//     \"Tuesday\",\r\n//     \"Wednesday\",\r\n//     \"Thursday\",\r\n//     \"Friday\",\r\n//     \"Saturday\",\r\n//   ];\r\n\r\n//   let day = days[d.getDay()];\r\n//   let date = d.getDate();\r\n//   let month = months[d.getMonth()];\r\n//   let year = d.getFullYear();\r\n\r\n//   return `${day}, ${date} ${month} ${year}`;\r\n// };\r\n// const defaults = {\r\n//   color: \"white\",\r\n//   size: 112,\r\n//   animate: true,\r\n// };\r\n// class Weather extends React.Component {\r\n//   state = {\r\n//     lat: undefined,\r\n//     lon: undefined,\r\n//     errorMessage: undefined,\r\n//     temperatureC: undefined,\r\n//     temperatureF: undefined,\r\n//     city: undefined,\r\n//     country: undefined,\r\n//     humidity: undefined,\r\n//     description: undefined,\r\n//     icon: \"CLEAR_DAY\",\r\n//     sunrise: undefined,\r\n//     sunset: undefined,\r\n//     errorMsg: undefined,\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     if (navigator.geolocation) {\r\n//       this.getPosition()\r\n//         //If user allow location service then will fetch data & send it to get-weather function.\r\n//         .then((position) => {\r\n//           this.getWeather(position.coords.latitude, position.coords.longitude);\r\n//         })\r\n//         .catch((err) => {\r\n//           //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\r\n//           this.getWeather(28.67, 77.22);\r\n//           alert(\r\n//             \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\r\n//           );\r\n//         });\r\n//     } else {\r\n//       alert(\"Geolocation not available\");\r\n//     }\r\n\r\n//     this.timerID = setInterval(\r\n//       () => this.getWeather(this.state.lat, this.state.lon),\r\n//       600000\r\n//     );\r\n//   }\r\n\r\n//   componentWillUnmount() {\r\n//     clearInterval(this.timerID);\r\n//   }\r\n\r\n//   // tick = () => {\r\n//   //   this.getPosition()\r\n//   //   .then((position) => {\r\n//   //     this.getWeather(position.coords.latitude, position.coords.longitude)\r\n//   //   })\r\n//   //   .catch((err) => {\r\n//   //     this.setState({ errorMessage: err.message });\r\n//   //   });\r\n//   // }\r\n\r\n//   getPosition = (options) => {\r\n//     return new Promise(function (resolve, reject) {\r\n//       navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n//     });\r\n//   };\r\n//   getWeather = async (lat, lon) => {\r\n//     const api_call = await fetch(\r\n//       `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=5f4744fd6ed7e30e662f45ae7fd7b8bf`\r\n//     );\r\n\r\n    \r\n\r\n\r\n//     const data = await api_call.json();\r\n//     this.setState({\r\n//       lat: lat,\r\n//       lon: lon,\r\n//       city: data.name,\r\n//       temperatureC: Math.round(data.main.temp),\r\n//       temperatureF: Math.round(data.main.temp * 1.8 + 32),\r\n//       humidity: data.main.humidity,\r\n//       main: data.weather[0].main,\r\n//       country: data.sys.country,\r\n//       // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\r\n\r\n//       // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\r\n//     });\r\n//     switch (this.state.main) {\r\n//       case \"Haze\":\r\n//         this.setState({ icon: \"CLEAR_DAY\" });\r\n//         break;\r\n//       case \"Clouds\":\r\n//         this.setState({ icon: \"CLOUDY\" });\r\n//         break;\r\n//       case \"Rain\":\r\n//         this.setState({ icon: \"RAIN\" });\r\n//         break;\r\n//       case \"Snow\":\r\n//         this.setState({ icon: \"SNOW\" });\r\n//         break;\r\n//       case \"Dust\":\r\n//         this.setState({ icon: \"WIND\" });\r\n//         break;\r\n//       case \"Drizzle\":\r\n//         this.setState({ icon: \"SLEET\" });\r\n//         break;\r\n//       case \"Fog\":\r\n//         this.setState({ icon: \"FOG\" });\r\n//         break;\r\n//       case \"Smoke\":\r\n//         this.setState({ icon: \"FOG\" });\r\n//         break;\r\n//       case \"Tornado\":\r\n//         this.setState({ icon: \"WIND\" });\r\n//         break;\r\n//       default:\r\n//         this.setState({ icon: \"CLEAR_DAY\" });\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     if (this.state.temperatureC) {\r\n//       return (\r\n        // <React.Fragment>\r\n        //   <div className=\"city\">\r\n        //     <div className=\"title\">\r\n        //       <h2>{this.state.city}</h2>\r\n        //       <h3>{this.state.country}</h3>\r\n        //     </div>\r\n          //   <div className=\"mb-icon\">\r\n          //     {\" \"}\r\n              // <ReactAnimatedWeather\r\n              //   icon={this.state.icon}\r\n              //   color={defaults.color}\r\n              //   size={defaults.size}\r\n              //   animate={defaults.animate}\r\n              // />\r\n          //     <p>{this.state.main}</p>\r\n          //   </div>\r\n          //   <div className=\"date-time\">\r\n          //     <div className=\"dmy\">\r\n          //       <div id=\"txt\"></div>\r\n          //       <div className=\"current-time\">\r\n          //         <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\r\n          //       </div>\r\n          //       <div className=\"current-date\">{dateBuilder(new Date())}</div>\r\n          //     </div>\r\n          //     <div className=\"temperature\">\r\n          //       <p>\r\n          //         {this.state.temperatureC}Â°<span>C</span>\r\n          //       </p>\r\n          //       {/* <span className=\"slash\">/</span>\r\n          //       {this.state.temperatureF} &deg;F */}\r\n          //     </div>\r\n          //   </div>\r\n          // </div>\r\n          // <Forcast icon={this.state.icon} weather={this.state.main} />\r\n        // </React.Fragment>\r\n//       );\r\n//     } else {\r\n//       return (\r\n//         <React.Fragment>\r\n//           <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\r\n//           <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\r\n//             Detecting your location\r\n//           </h3>\r\n//           <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\r\n//             Your current location wil be displayed on the App <br></br> & used\r\n//             for calculating Real time weather.\r\n//           </h3>\r\n//         </React.Fragment>\r\n//       );\r\n//     }\r\n//   }\r\n// }\r\n\r\n// export default Weather;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport apiKeys from \"./apiKeys\";\r\nimport Clock from \"react-live-clock\";\r\nimport Forcast from \"./forcast\";\r\nimport loader from \"./images/WeatherIcons.gif\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\n\r\nfunction CurrentLocation() {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [location, setLocation] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const fetchWeatherData = async () => {\r\n      try {\r\n        if (navigator.geolocation) {\r\n          navigator.geolocation.getCurrentPosition(async (position) => {\r\n            const latitude = position.coords.latitude;\r\n            const longitude = position.coords.longitude;\r\n            if (isMounted) {\r\n              setLocation({ latitude, longitude });\r\n            }\r\n\r\n            try {\r\n              const response = await fetch('http://localhost:5000/api/weather', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  latitude,\r\n                  longitude\r\n                })\r\n              });\r\n              if (!response.ok) {\r\n                throw new Error('Failed to fetch weather data');\r\n              }\r\n              const data = await response.json();\r\n              if (isMounted) {\r\n                setWeatherData(data);\r\n              }\r\n            } catch (error) {\r\n              console.error('Error fetching weather data:', error);\r\n            }\r\n          });\r\n        } else {\r\n          console.error('Geolocation is not supported by this browser.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching weather data:', error);\r\n      }\r\n    };\r\n\r\n    fetchWeatherData();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const defaults = {\r\n    color: \"white\",\r\n    size: 112,\r\n    animate: true,\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {console.log('weatherData', weatherData)}\r\n      {console.log('location', location)}\r\n<div>\r\n      {/* {weatherData && location && ( */}\r\n        <div className=\"city\">\r\n          <div className=\"title\">\r\n            <h2>{weatherData.location}</h2>\r\n            <h3>{weatherData.country}</h3>\r\n          </div>\r\n          <div className=\"mb-icon\">\r\n              {\" \"}\r\n              <ReactAnimatedWeather\r\n                icon=\"CLEAR_DAY\"\r\n                color={defaults.color}\r\n                size={defaults.size}\r\n                animate={defaults.animate}\r\n              />\r\n              {/* <p>{this.state.main}</p> */}\r\n            </div>\r\n            <div className=\"date-time\">\r\n              <div className=\"dmy\">\r\n                <div id=\"txt\"></div>\r\n                <div className=\"current-time\">\r\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\r\n                </div>\r\n                {/* <div className=\"current-date\">{dateBuilder(new Date())}</div> */}\r\n              </div>\r\n              <div className=\"temperature\">\r\n                <p>\r\n                {Math.round(weatherData.temperature -273)}Â°<span>C</span>\r\n\r\n                </p>\r\n                {/* <span className=\"slash\">/</span>\r\n                {this.state.temperatureF} &deg;F */}\r\n              </div>\r\n            </div>\r\n            </div>\r\n       \r\n          {/* <Forcast icon=\"CLEAR_DAY\" weather=\"Clear\"/> */}\r\n          <div className=\"forecast\">\r\n      <div className=\"forecast-icon\">\r\n        <ReactAnimatedWeather\r\n          icon={props.icon}\r\n          color={defaults.color}\r\n          size={defaults.size}\r\n          animate={defaults.animate}\r\n        />\r\n      </div>\r\n      <div className=\"today-weather\">\r\n        <h3>{props.weather}</h3>\r\n        <div className=\"search-box\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-bar\"\r\n            placeholder=\"Search any city\"\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            value={query}\r\n          />\r\n          <div className=\"img-box\">\r\n            {\" \"}\r\n            <img\r\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\r\n              onClick={search}\r\n            />\r\n          </div>\r\n        </div>\r\n        <ul>\r\n          {typeof weather.main != \"undefined\" ? (\r\n            <div>\r\n              {\" \"}\r\n              <li className=\"cityHead\">\r\n                <p>\r\n                  {weather.name}, {weather.sys.country}\r\n                </p>\r\n                <img\r\n                  className=\"temp\"\r\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\r\n                />\r\n              </li>\r\n              <li>\r\n                Temperature{\" \"}\r\n                <span className=\"temp\">\r\n                  {Math.round(weatherData.temperature)}Â°c ({weatherData.icon})\r\n                </span>\r\n              </li>\r\n              <li>\r\n                Humidity{\" \"}\r\n                <span className=\"temp\">\r\n                  {/* {Math.round(weather.main.humidity)}% */}\r\n                </span>\r\n              </li>\r\n              <li>\r\n                Visibility{\" \"}\r\n                <span className=\"temp\">\r\n                  {/* {Math.round(weather.visibility)} mi */}\r\n                </span>\r\n              </li>\r\n              <li>\r\n                Wind Speed{\" \"}\r\n                <span className=\"temp\">\r\n                  {/* {Math.round(weather.wind.speed)} Km/h */}\r\n                </span>\r\n              </li>\r\n            </div>\r\n          ) : (\r\n            <li>\r\n              {/* {error.query} {error.message} */}\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n          </div>\r\n      {/* )} */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default CurrentLocation;\r\n"],"mappingslD,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,2BAA2B;AAC9C,OAAOC,oBAAoB,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,IAAIc,SAAS,GAAG,IAAI;IAEpB,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,IAAIC,SAAS,CAACC,WAAW,EAAE;UACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,MAAOC,QAAQ,IAAK;YAC3D,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAM,CAACD,QAAQ;YACzC,MAAME,SAAS,GAAGH,QAAQ,CAACE,MAAM,CAACC,SAAS;YAC3C,IAAIR,SAAS,EAAE;cACbD,WAAW,CAAC;gBAAEO,QAAQ;gBAAEE;cAAU,CAAC,CAAC;YACtC;YAEA,IAAI;cACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;gBAChEC,MAAM,EAAE,MAAM;gBACdC,OAAO,EAAE;kBACP,cAAc,EAAE;gBAClB,CAAC;gBACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;kBACnBT,QAAQ;kBACRE;gBACF,CAAC;cACH,CAAC,CAAC;cACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;gBAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;cACjD;cACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;cAClC,IAAInB,SAAS,EAAE;gBACbH,cAAc,CAACqB,IAAI,CAAC;cACtB;YACF,CAAC,CAAC,OAAOE,KAAK,EAAE;cACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;YACtD;UACF,CAAC,CAAC;QACJ,CAAC,MAAM;UACLC,OAAO,CAACD,KAAK,CAAC,+CAA+C,CAAC;QAChE;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDnB,gBAAgB,CAAC,CAAC;IAElB,OAAO,MAAM;MACXD,SAAS,GAAG,KAAK;IACnB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMsB,QAAQ,GAAG;IACfC,KAAK,EAAE,OAAO;IACdC,IAAI,EAAE,GAAG;IACTC,OAAO,EAAE;EACX,CAAC;EAED,oBACEhC,OAAA,CAACT,KAAK,CAAC0C,QAAQ;IAAAC,QAAA,GACZN,OAAO,CAACO,GAAG,CAAC,aAAa,EAAEhC,WAAW,CAAC,EACvCyB,OAAO,CAACO,GAAG,CAAC,UAAU,EAAE9B,QAAQ,CAAC,eACxCL,OAAA;MAAAkC,QAAA,gBAEQlC,OAAA;QAAKoC,SAAS,EAAC,MAAM;QAAAF,QAAA,gBACnBlC,OAAA;UAAKoC,SAAS,EAAC,OAAO;UAAAF,QAAA,gBACpBlC,OAAA;YAAAkC,QAAA,EAAK/B,WAAW,CAACE;UAAQ;YAAAgC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC/BxC,OAAA;YAAAkC,QAAA,EAAK/B,WAAW,CAACsC;UAAO;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC,eACNxC,OAAA;UAAKoC,SAAS,EAAC,SAAS;UAAAF,QAAA,GACnB,GAAG,eACJlC,OAAA,CAACF,oBAAoB;YACnB4C,IAAI,EAAC,WAAW;YAChBZ,KAAK,EAAED,QAAQ,CAACC,KAAM;YACtBC,IAAI,EAAEF,QAAQ,CAACE,IAAK;YACpBC,OAAO,EAAEH,QAAQ,CAACG;UAAQ;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEC,CAAC,eACNxC,OAAA;UAAKoC,SAAS,EAAC,WAAW;UAAAF,QAAA,gBACxBlC,OAAA;YAAKoC,SAAS,EAAC,KAAK;YAAAF,QAAA,gBAClBlC,OAAA;cAAK2C,EAAE,EAAC;YAAK;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACpBxC,OAAA;cAAKoC,SAAS,EAAC,cAAc;cAAAF,QAAA,eAC3BlC,OAAA,CAACL,KAAK;gBAACiD,MAAM,EAAC,UAAU;gBAACC,QAAQ,EAAE,IAAK;gBAACC,OAAO,EAAE;cAAK;gBAAAT,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEH,CAAC,eACNxC,OAAA;YAAKoC,SAAS,EAAC,aAAa;YAAAF,QAAA,eAC1BlC,OAAA;cAAAkC,QAAA,GACCa,IAAI,CAACC,KAAK,CAAC7C,WAAW,CAAC8C,WAAW,GAAE,GAAG,CAAC,EAAC,MAAC,eAAAjD,OAAA;gBAAAkC,QAAA,EAAM;cAAC;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEtD;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAGRxC,OAAA;QAAKoC,SAAS,EAAC,UAAU;QAAAF,QAAA,gBAC7BlC,OAAA;UAAKoC,SAAS,EAAC,eAAe;UAAAF,QAAA,eAC5BlC,OAAA,CAACF,oBAAoB;YACnB4C,IAAI,EAAEQ,KAAK,CAACR,IAAK;YACjBZ,KAAK,EAAED,QAAQ,CAACC,KAAM;YACtBC,IAAI,EAAEF,QAAQ,CAACE,IAAK;YACpBC,OAAO,EAAEH,QAAQ,CAACG;UAAQ;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNxC,OAAA;UAAKoC,SAAS,EAAC,eAAe;UAAAF,QAAA,gBAC5BlC,OAAA;YAAAkC,QAAA,EAAKgB,KAAK,CAACC;UAAO;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACxBxC,OAAA;YAAKoC,SAAS,EAAC,YAAY;YAAAF,QAAA,gBACzBlC,OAAA;cACEoD,IAAI,EAAC,MAAM;cACXhB,SAAS,EAAC,YAAY;cACtBiB,WAAW,EAAC,iBAAiB;cAC7BC,QAAQ,EAAGC,CAAC,IAAKC,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAE;cAC1CA,KAAK,EAAEC;YAAM;cAAAtB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACd,CAAC,eACFxC,OAAA;cAAKoC,SAAS,EAAC,SAAS;cAAAF,QAAA,GACrB,GAAG,eACJlC,OAAA;gBACE4D,GAAG,EAAC,6DAA6D;gBACjEC,OAAO,EAAEC;cAAO;gBAAAzB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjB,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACNxC,OAAA;YAAAkC,QAAA,EACG,OAAOiB,OAAO,CAACY,IAAI,IAAI,WAAW,gBACjC/D,OAAA;cAAAkC,QAAA,GACG,GAAG,eACJlC,OAAA;gBAAIoC,SAAS,EAAC,UAAU;gBAAAF,QAAA,gBACtBlC,OAAA;kBAAAkC,QAAA,GACGiB,OAAO,CAACa,IAAI,EAAC,IAAE,EAACb,OAAO,CAACc,GAAG,CAACxB,OAAO;gBAAA;kBAAAJ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACnC,CAAC,eACJxC,OAAA;kBACEoC,SAAS,EAAC,MAAM;kBAChBwB,GAAG,EAAG,qCAAoCT,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACT,IAAK;gBAAM;kBAAAL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACzE,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACLxC,OAAA;gBAAAkC,QAAA,GAAI,aACS,EAAC,GAAG,eACflC,OAAA;kBAAMoC,SAAS,EAAC,MAAM;kBAAAF,QAAA,GACnBa,IAAI,CAACC,KAAK,CAAC7C,WAAW,CAAC8C,WAAW,CAAC,EAAC,SAAI,EAAC9C,WAAW,CAACuC,IAAI,EAAC,GAC7D;gBAAA;kBAAAL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,eACLxC,OAAA;gBAAAkC,QAAA,GAAI,UACM,EAAC,GAAG,eACZlC,OAAA;kBAAMoC,SAAS,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEhB,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,eACLxC,OAAA;gBAAAkC,QAAA,GAAI,YACQ,EAAC,GAAG,eACdlC,OAAA;kBAAMoC,SAAS,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEhB,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,eACLxC,OAAA;gBAAAkC,QAAA,GAAI,YACQ,EAAC,GAAG,eACdlC,OAAA;kBAAMoC,SAAS,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEhB,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,gBAENxC,OAAA;cAAAqC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEI;UACL;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEI,CAAC;AAErB;AAACtC,EAAA,CAlLQD,eAAe;AAAAiE,EAAA,GAAfjE,eAAe;AAoLxB,eAAeA,eAAe;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}