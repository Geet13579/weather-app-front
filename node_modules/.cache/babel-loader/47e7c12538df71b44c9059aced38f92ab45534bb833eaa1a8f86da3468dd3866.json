{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Expert\\\\Desktop\\\\weather-app\\\\src\\\\App.js\";\n// import React, { useState, useEffect } from 'react';\n\n// const WeatherApp = () => {\n//     const [weatherData, setWeatherData] = useState(null);\n//     const [location, setLocation] = useState(null);\n\n//     useEffect(() => {\n//         const fetchWeatherData = async () => {\n//             try {\n//                 if (navigator.geolocation) {\n//                     navigator.geolocation.getCurrentPosition(async (position) => {\n//                         const latitude = position.coords.latitude;\n//                         const longitude = position.coords.longitude;\n//                         setLocation({ latitude, longitude });\n\n//                         try {\n//                           const response = await fetch('http://localhost:5000/api/weather', {\n//                               method: 'POST',\n//                               headers: {\n//                                   'Content-Type': 'application/json'\n//                               },\n//                               body: JSON.stringify({\n//                                   latitude,\n//                                   longitude\n//                               })\n//                           });\n//                           if (!response.ok) {\n//                               throw new Error('Failed to fetch weather data');\n//                           }\n//                           const data = await response.json();\n//                           setWeatherData(data);\n//                       } catch (error) {\n//                           console.error('Error fetching weather data:', error);\n//                       }\n\n//                         // const data = await response.json();\n//                         // setWeatherData(data);\n//                     });\n//                 } else {\n//                     console.error('Geolocation is not supported by this browser.');\n//                 }\n//             } catch (error) {\n//                 console.error('Error fetching weather data:', error);\n//             }\n//         };\n\n//         fetchWeatherData();\n//     }, []);\n\n//     return (\n//         <div>\n//             {location && (\n//                 <p>Latitude: {location.latitude}, Longitude: {location.longitude}</p>\n//             )}\n//             {weatherData ? (\n//                 <div>\n//                     <h2>{weatherData.location}</h2>\n//                     <p>Temperature: {weatherData.temperature}</p>\n//                     <p>Conditions: {weatherData.conditions}</p>\n//                     {/* Add more weather data as needed */}\n//                 </div>\n//             ) : (\n//                 <p>Loading weather data...</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default WeatherApp;\n\nimport React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dateBuilder = d => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true\n};\nclass Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: undefined,\n      lon: undefined,\n      errorMessage: undefined,\n      temperatureC: undefined,\n      temperatureF: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      icon: \"CLEAR_DAY\",\n      sunrise: undefined,\n      sunset: undefined,\n      errorMsg: undefined\n    };\n    // tick = () => {\n    //   this.getPosition()\n    //   .then((position) => {\n    //     this.getWeather(position.coords.latitude, position.coords.longitude)\n    //   })\n    //   .catch((err) => {\n    //     this.setState({ errorMessage: err.message });\n    //   });\n    // }\n    this.getPosition = options => {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n      });\n    };\n    this.getWeather = async (lat, lon) => {\n      const api_call = await fetch(`${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=5f4744fd6ed7e30e662f45ae7fd7b8bf`);\n      const data = await api_call.json();\n      this.setState({\n        lat: lat,\n        lon: lon,\n        city: data.name,\n        temperatureC: Math.round(data.main.temp),\n        temperatureF: Math.round(data.main.temp * 1.8 + 32),\n        humidity: data.main.humidity,\n        main: data.weather[0].main,\n        country: data.sys.country\n        // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n\n        // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n      });\n      switch (this.state.main) {\n        case \"Haze\":\n          this.setState({\n            icon: \"CLEAR_DAY\"\n          });\n          break;\n        case \"Clouds\":\n          this.setState({\n            icon: \"CLOUDY\"\n          });\n          break;\n        case \"Rain\":\n          this.setState({\n            icon: \"RAIN\"\n          });\n          break;\n        case \"Snow\":\n          this.setState({\n            icon: \"SNOW\"\n          });\n          break;\n        case \"Dust\":\n          this.setState({\n            icon: \"WIND\"\n          });\n          break;\n        case \"Drizzle\":\n          this.setState({\n            icon: \"SLEET\"\n          });\n          break;\n        case \"Fog\":\n          this.setState({\n            icon: \"FOG\"\n          });\n          break;\n        case \"Smoke\":\n          this.setState({\n            icon: \"FOG\"\n          });\n          break;\n        case \"Tornado\":\n          this.setState({\n            icon: \"WIND\"\n          });\n          break;\n        default:\n          this.setState({\n            icon: \"CLEAR_DAY\"\n          });\n      }\n    };\n  }\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n      //If user allow location service then will fetch data & send it to get-weather function.\n      .then(position => {\n        this.getWeather(position.coords.latitude, position.coords.longitude);\n      }).catch(err => {\n        //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n        this.getWeather(28.67, 77.22);\n        alert(\"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\");\n      });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n    this.timerID = setInterval(() => this.getWeather(this.state.lat, this.state.lon), 600000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  render() {\n    if (this.state.temperatureC) {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"city\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"title\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: this.state.city\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: this.state.country\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-icon\",\n              children: [\" \", /*#__PURE__*/_jsxDEV(ReactAnimatedWeather, {\n                icon: this.state.icon,\n                color: defaults.color,\n                size: defaults.size,\n                animate: defaults.animate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: this.state.main\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"date-time\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dmy\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  id: \"txt\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"current-time\",\n                  children: /*#__PURE__*/_jsxDEV(Clock, {\n                    format: \"HH:mm:ss\",\n                    interval: 1000,\n                    ticking: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"current-date\",\n                  children: dateBuilder(new Date())\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"temperature\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Forcast, {\n            icon: this.state.icon,\n            weather: this.state.main\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: loader,\n          style: {\n            width: \"50%\",\n            WebkitUserDrag: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: \"white\",\n            fontSize: \"22px\",\n            fontWeight: \"600\"\n          },\n          children: \"Detecting your location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: \"white\",\n            marginTop: \"10px\"\n          },\n          children: [\"Your current location wil be displayed on the App \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 63\n          }, this), \" & used for calculating Real time weather.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this);\n    }\n  }\n}\nexport default Weather;","map":{"version":3,"names":["React","apiKeys","Clock","Forcast","loader","ReactAnimatedWeather","jsxDEV","_jsxDEV","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","defaults","color","size","animate","Weather","Component","constructor","args","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","city","country","humidity","description","icon","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","api_call","fetch","base","data","json","setState","name","Math","round","main","temp","weather","sys","componentDidMount","then","position","coords","latitude","longitude","catch","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","render","Fragment","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","format","interval","ticking","Date","src","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop"],"sources":["C:/Users/Expert/Desktop/weather-app/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n\n// const WeatherApp = () => {\n//     const [weatherData, setWeatherData] = useState(null);\n//     const [location, setLocation] = useState(null);\n\n//     useEffect(() => {\n//         const fetchWeatherData = async () => {\n//             try {\n//                 if (navigator.geolocation) {\n//                     navigator.geolocation.getCurrentPosition(async (position) => {\n//                         const latitude = position.coords.latitude;\n//                         const longitude = position.coords.longitude;\n//                         setLocation({ latitude, longitude });\n\n//                         try {\n//                           const response = await fetch('http://localhost:5000/api/weather', {\n//                               method: 'POST',\n//                               headers: {\n//                                   'Content-Type': 'application/json'\n//                               },\n//                               body: JSON.stringify({\n//                                   latitude,\n//                                   longitude\n//                               })\n//                           });\n//                           if (!response.ok) {\n//                               throw new Error('Failed to fetch weather data');\n//                           }\n//                           const data = await response.json();\n//                           setWeatherData(data);\n//                       } catch (error) {\n//                           console.error('Error fetching weather data:', error);\n//                       }\n                      \n//                         // const data = await response.json();\n//                         // setWeatherData(data);\n//                     });\n//                 } else {\n//                     console.error('Geolocation is not supported by this browser.');\n//                 }\n//             } catch (error) {\n//                 console.error('Error fetching weather data:', error);\n//             }\n//         };\n\n//         fetchWeatherData();\n//     }, []);\n\n//     return (\n//         <div>\n//             {location && (\n//                 <p>Latitude: {location.latitude}, Longitude: {location.longitude}</p>\n//             )}\n//             {weatherData ? (\n//                 <div>\n//                     <h2>{weatherData.location}</h2>\n//                     <p>Temperature: {weatherData.temperature}</p>\n//                     <p>Conditions: {weatherData.conditions}</p>\n//                     {/* Add more weather data as needed */}\n//                 </div>\n//             ) : (\n//                 <p>Loading weather data...</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default WeatherApp;\n\n\nimport React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  // tick = () => {\n  //   this.getPosition()\n  //   .then((position) => {\n  //     this.getWeather(position.coords.latitude, position.coords.longitude)\n  //   })\n  //   .catch((err) => {\n  //     this.setState({ errorMessage: err.message });\n  //   });\n  // }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=5f4744fd6ed7e30e662f45ae7fd7b8bf`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n      // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n\n      // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n      <div className=\"container\">\n\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {/* {this.state.temperatureC}°<span>C</span> */}\n                </p>\n                {/* <span className=\"slash\">/</span>\n                {this.state.temperatureF} &deg;F */}\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n          </div>\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n         \n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}